version: '3.8'

services:
  # PostgreSQL Database with persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: veloxe_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-veloxe}
      POSTGRES_USER: ${POSTGRES_USER:-veloxe}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "127.0.0.1:5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-veloxe} -d ${POSTGRES_DB:-veloxe}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache with persistent storage
  redis:
    image: redis:7-alpine
    container_name: veloxe_redis
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Telegram Bot
  bot:
    build:
      context: .
      dockerfile: apps/bot/Dockerfile
    container_name: veloxe_bot
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-veloxe}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-veloxe}
      - REDIS_URL=redis://redis:6379/0
      - ADMIN_SECRET=${ADMIN_SECRET}
      - ENVIRONMENT=production
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # Admin API (FastAPI)
  admin-api:
    build:
      context: .
      dockerfile: apps/admin/backend/Dockerfile
    container_name: veloxe_admin_api
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-veloxe}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-veloxe}
      - REDIS_URL=redis://redis:6379/0
      - ADMIN_CORS_ORIGINS=http://localhost:3000,http://145.223.117.108:3000
      - ADMIN_SECRET=${ADMIN_SECRET}
      - ENVIRONMENT=production
      - SENTRY_DSN=${SENTRY_DSN}
      - WORKERS=${WORKERS:-4}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "8000:8000"  # API доступен извне
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # Admin Frontend (React) - Production build
  admin-frontend:
    build:
      context: .
      dockerfile: apps/admin/frontend/Dockerfile.prod
      args:
        - REACT_APP_API_URL=http://145.223.117.108:8000/api
    container_name: veloxe_admin_frontend
    ports:
      - "3000:80"  # Фронтенд доступен извне
    depends_on:
      - admin-api
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: veloxe_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - admin-api
      - admin-frontend
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Database Backup Service
  postgres-backup:
    image: postgres:15-alpine
    container_name: veloxe_backup
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-veloxe}
      - POSTGRES_USER=${POSTGRES_USER:-veloxe} 
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: sh -c "while true; do sleep 3600; done"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    driver: bridge