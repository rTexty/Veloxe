import asyncio
from typing import Optional, List, Union
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
import logging

logger = logging.getLogger(__name__)


class UXHelper:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏ –ø–ª–∞–≤–Ω–æ–≥–æ UX –≤ –±–æ—Ç–µ"""
    
    @staticmethod
    async def typing_action(chat_id: int, bot, duration: float = 0.2):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏"""
        try:
            await bot.send_chat_action(chat_id, "typing")
            await asyncio.sleep(duration)
        except Exception as e:
            logger.error(f"Failed to send typing action: {e}")
    
    @staticmethod
    async def smooth_edit_text(
        message: types.Message,
        new_text: str,
        reply_markup: Optional[InlineKeyboardMarkup] = None,
        typing_delay: float = 0.3,
        parse_mode: Optional[str] = "HTML"
    ):
        """–ü–ª–∞–≤–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø–µ—á–∞—Ç–∏"""
        try:
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            await UXHelper.typing_action(message.chat.id, message.bot, typing_delay)
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.edit_text(
                new_text, 
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e).lower():
                logger.error(f"Failed to edit message: {e}")
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await message.answer(new_text, reply_markup=reply_markup, parse_mode=parse_mode)
        except Exception as e:
            logger.error(f"Error in smooth_edit_text: {e}")
    
    @staticmethod
    async def smooth_answer(
        message: types.Message,
        text: str,
        reply_markup: Optional[InlineKeyboardMarkup] = None,
        typing_delay: float = 0.3,
        parse_mode: Optional[str] = "HTML"
    ):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø–µ—á–∞—Ç–∏"""
        try:
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            await UXHelper.typing_action(message.chat.id, message.bot, typing_delay)
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await message.answer(
                text, 
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        except Exception as e:
            logger.error(f"Error in smooth_answer: {e}")
            return None
    
    @staticmethod
    async def smooth_send_message(
        bot,
        chat_id: int,
        text: str,
        reply_markup: Optional[InlineKeyboardMarkup] = None,
        typing_delay: float = 1.2,
        parse_mode: Optional[str] = "HTML"
    ):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø–µ—á–∞—Ç–∏"""
        try:
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            await UXHelper.typing_action(chat_id, bot, typing_delay)
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        except Exception as e:
            logger.error(f"Error in smooth_send_message: {e}")
            return None
    
    @staticmethod
    async def progress_edit(
        message: types.Message,
        steps: List[str],
        final_text: str,
        reply_markup: Optional[InlineKeyboardMarkup] = None,
        step_delay: float = 1.0
    ):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            for i, step in enumerate(steps):
                # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥
                progress_bar = "‚ñì" * (i + 1) + "‚ñë" * (len(steps) - i - 1)
                step_text = f"{step}\n\n{progress_bar}"
                
                await UXHelper.smooth_edit_text(
                    message, 
                    step_text, 
                    typing_delay=step_delay * 0.6
                )
                
                await asyncio.sleep(step_delay)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            await UXHelper.smooth_edit_text(
                message, 
                final_text, 
                reply_markup=reply_markup,
                typing_delay=0.5
            )
            
        except Exception as e:
            logger.error(f"Error in progress_edit: {e}")
            # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            await message.answer(final_text, reply_markup=reply_markup)


class OnboardingUX:
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    
    @staticmethod
    def create_button_keyboard(buttons: List[tuple], rows: int = 1) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Å–∏–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫–Ω–æ–ø–æ–∫"""
        keyboard = []
        buttons_per_row = len(buttons) // rows if len(buttons) % rows == 0 else len(buttons) // rows + 1
        
        for i in range(0, len(buttons), buttons_per_row):
            row = []
            for j in range(buttons_per_row):
                if i + j < len(buttons):
                    text, callback_data = buttons[i + j]
                    row.append(InlineKeyboardButton(text=text, callback_data=callback_data))
            keyboard.append(row)
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    @staticmethod
    async def animated_welcome(
        message: types.Message,
        user_name: str = "–¥—Ä—É–≥",
        user_profile: dict = None
    ):
        """–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–º GPT —Ç–µ–∫—Å—Ç–æ–º"""
        from services.greeting_service import GreetingService
        from services.settings_service import SettingsService
        from shared.config.database import async_session
        
        # Check if dynamic greetings are enabled
        async with async_session() as session:
            settings_service = SettingsService(session)
            greeting_enabled = await settings_service.get_setting("greeting_enabled", True)
            
            if greeting_enabled:
                try:
                    # Generate personalized greeting
                    greeting_service = GreetingService()
                    custom_greeting = await greeting_service.generate_greeting(
                        user_profile or {"name": user_name},
                        scenario="first_time"
                    )
                    
                    # Use generated greeting as first step
                    welcome_steps = [
                        custom_greeting,
                        f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ",
                        # f"üõ°Ô∏è –í—Å—ë –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ"  # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û
                    ]
                except Exception as e:
                    print(f"Failed to generate greeting: {e}")
                    # Fallback to static greeting
                    welcome_steps = [
                        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!",
                        f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ",
                        # f"üõ°Ô∏è –í—Å—ë –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ"  # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û
                    ]
            else:
                # Static greeting when disabled
                welcome_steps = [
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!",
                    f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ",
                    # f"üõ°Ô∏è –í—Å—ë –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ"  # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û
                ]
        
        final_text = f"""üå∏ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!</b>

–¢—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –¥–ª—è –¥—É—à–∏. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ:
‚Ä¢ üí¨ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏  
‚Ä¢ üßò‚Äç‚ôÄÔ∏è –ù–∞–π—Ç–∏ –ø–æ–∫–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É
‚Ä¢ üìà –û—Ç—Å–ª–µ–¥–∏—Ç—å —Å–≤–æ—ë —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

‚ö†Ô∏è <i>–≠—Ç–æ –Ω–µ –∑–∞–º–µ–Ω–∞ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏. –í –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –∑–≤–æ–Ω–∏ 112.</i>"""
        
        keyboard = OnboardingUX.create_button_keyboard([
            ("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "consent_accept"),
            ("üìã –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "show_full_policy"),
            ("‚ùå –ù–µ –≥–æ—Ç–æ–≤", "consent_decline")
        ], rows=2)
        
        # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê –ê–ù–ò–ú–ê–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò
        # await UXHelper.progress_edit(
        #     message,
        #     welcome_steps,
        #     final_text,
        #     keyboard,
        #     step_delay=1.2
        # )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
        await UXHelper.smooth_edit_text(
            message,
            final_text,
            keyboard,
            typing_delay=0.8
        )
    
    @staticmethod
    async def survey_intro_animation(message: types.Message):
        """–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã"""
        
        final_text = """üåü <b>–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ!</b>

–ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–º–æ–≥—É—Ç –º–Ω–µ:
‚Ä¢ üí° –õ—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
‚Ä¢ üí° –î–∞–≤–∞—Ç—å –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã  
‚Ä¢ üåà –°–æ–∑–¥–∞—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–ª—è –æ–±—â–µ–Ω–∏—è

<i>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞.</i>"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ü–æ–µ—Ö–∞–ª–∏!", callback_data="survey_name")]
        ])
        
        await UXHelper.smooth_edit_text(
            message, 
            final_text, 
            keyboard,
            typing_delay=0.5
        )
    
    @staticmethod
    def format_survey_question(
        question: str, 
        step: int, 
        total_steps: int,
        description: Optional[str] = None
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã"""
        progress = "‚óè" * step + "‚óã" * (total_steps - step)
        
        text = f"<b>–®–∞–≥ {step} –∏–∑ {total_steps}</b>\n{progress}\n\n"
        text += f"üí≠ <b>{question}</b>"
        
        if description:
            text += f"\n\n<i>{description}</i>"
            
        return text
    
    @staticmethod
    def create_selection_keyboard(
        items: List[str], 
        callback_prefix: str,
        selected_indices: set = None,
        max_cols: int = 2,
        done_text: str = "‚úÖ –ì–æ—Ç–æ–≤–æ"
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏"""
        if selected_indices is None:
            selected_indices = set()
            
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        for i in range(0, len(items), max_cols):
            row = []
            for j in range(max_cols):
                if i + j < len(items):
                    item = items[i + j]
                    index = i + j
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É —Å–ª–µ–≤–∞ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
                    display_text = f"‚úÖ {item}" if str(index) in selected_indices else f"‚¨ú {item}"
                    row.append(InlineKeyboardButton(
                        text=display_text, 
                        callback_data=f"{callback_prefix}_{index}"
                    ))
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
        keyboard.append([InlineKeyboardButton(text=done_text, callback_data=f"{callback_prefix}_done")])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)


class AnimatedMessages:
    """–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    @staticmethod
    async def thinking_animation(message: types.Message, final_text: str):
        """–ê–Ω–∏–º–∞—Ü–∏—è –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
        thinking_steps = [
            "ü§î –û–±–¥—É–º—ã–≤–∞—é...",
            "üí≠ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Å–ª–æ–≤–∞...",
            "‚ú® –ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç..."
        ]
        
        await UXHelper.progress_edit(
            message,
            thinking_steps, 
            final_text,
            step_delay=0.8
        )
    
    @staticmethod
    async def celebration_animation(message: types.Message, text: str):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è/–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        celebration_steps = [
            "üéâ –£—Ä–∞!",
            "‚ú® –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!",
            "üåü –û—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å!"
        ]
        
        await UXHelper.progress_edit(
            message,
            celebration_steps,
            text,
            step_delay=0.6
        )