from aiogram import Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import sys
sys.path.append('../../../')

from shared.config.database import async_session
from shared.models.user import User
from services.user_service import UserService
from services.settings_service import SettingsService
from utils.ux_helper import UXHelper, OnboardingUX, AnimatedMessages


async def consent_accept_handler(callback: types.CallbackQuery):
    telegram_id = str(callback.from_user.id)
    
    async with async_session() as session:
        user_service = UserService(session)
        settings_service = SettingsService(session)
        
        # Get user
        user = await user_service.get_or_create_user(telegram_id)
        
        # Get current policy version
        policy_version = await settings_service.get_setting("policy_version", "v1")
        
        # Accept terms
        await user_service.accept_terms(user, policy_version)
        
        # Log consent event
        await user_service.log_event(user.id, "consent_accepted")
        
        # Beautiful transition message
        await UXHelper.smooth_edit_text(
            callback.message,
            "‚ú® –û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ...",
            typing_delay=0.3
        )
        
        # Start beautiful survey flow
        await OnboardingUX.survey_intro_animation(callback.message)


async def consent_decline_handler(callback: types.CallbackQuery):
    decline_text = "üòî <b>–ü–æ–Ω—è—Ç–Ω–æ...</b>\n\n–ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è —è –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å.\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start‚ù§Ô∏è"
    
    await UXHelper.smooth_edit_text(
        callback.message,
        decline_text,
        typing_delay=0.3
    )


async def show_full_policy_handler(callback: types.CallbackQuery):
    async with async_session() as session:
        settings_service = SettingsService(session)
        
        full_policy = await settings_service.get_setting(
            "full_privacy_policy",
            "üìÑ <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b>\n\nüè• <b>–ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º:</b>\n‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n‚Ä¢ –ü–æ–º–æ–≥–∞–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —á—É–≤—Å—Ç–≤–∞—Ö\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n\n‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n‚Ä¢ –≠—Ç–æ –Ω–µ –∑–∞–º–µ–Ω–∞ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏\n‚Ä¢ –ú—ã –Ω–µ –≤—Ä–∞—á–∏ –∏ –Ω–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏\n‚Ä¢ –í –∫—Ä–∏–∑–∏—Å–µ –∑–≤–æ–Ω–∏—Ç–µ 112 üÜò\n\nüõ°Ô∏è <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>\n‚Ä¢ –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"
        )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –Ω–∞—á–∞–ª—É", callback_data="back_to_consent")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_message")]
    ])
    
    await UXHelper.smooth_edit_text(
        callback.message,
        full_policy, 
        reply_markup=keyboard,
        typing_delay=0.2
    )


async def back_to_consent_handler(callback: types.CallbackQuery):
    user_name = callback.from_user.first_name or "–¥—Ä—É–≥"
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –¥–æ–ª–≥–∞—è –∞–Ω–∏–º–∞—Ü–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    final_text = f"""üå∏ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!</b>

–¢—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –¥–ª—è –¥—É—à–∏. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ:
‚Ä¢ üí¨ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏  
‚Ä¢ üßò‚Äç‚ôÄÔ∏è –ù–∞–π—Ç–∏ –ø–æ–∫–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É
‚Ä¢ üìà –û—Ç—Å–ª–µ–¥–∏—Ç—å —Å–≤–æ—ë —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

‚ö†Ô∏è <i>–≠—Ç–æ –Ω–µ –∑–∞–º–µ–Ω–∞ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏. –í –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –∑–≤–æ–Ω–∏ 112.</i>"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="consent_accept"),
            InlineKeyboardButton(text="üìã –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data="show_full_policy")
        ],
        [
            InlineKeyboardButton(text="‚ùå –ù–µ –≥–æ—Ç–æ–≤", callback_data="consent_decline")
        ]
    ])
    
    await UXHelper.smooth_edit_text(
        callback.message,
        final_text,
        keyboard,
        typing_delay=0.2
    )


# Function removed - now handled in OnboardingUX.survey_intro_animation


# cancel_message_handler is now universal in dialog.py


def register_consent_handlers(dp: Dispatcher):
    dp.callback_query.register(consent_accept_handler, F.data == "consent_accept")
    dp.callback_query.register(consent_decline_handler, F.data == "consent_decline")
    dp.callback_query.register(show_full_policy_handler, F.data == "show_full_policy")
    dp.callback_query.register(back_to_consent_handler, F.data == "back_to_consent")
    # cancel_message_handler is universal in dialog.py