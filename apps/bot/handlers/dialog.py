import asyncio
from aiogram import Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import sys
sys.path.append('../../../')

from shared.config.database import async_session
from services.user_service import UserService
from services.conversation_service import ConversationService
from services.gpt_service import GPTService
from services.rhythm_service import RhythmService
from services.settings_cache import settings_cache
from utils.ux_helper import UXHelper, OnboardingUX, AnimatedMessages


async def dialog_message_handler(message: types.Message):
    """Handle user messages in dialog"""
    telegram_id = str(message.from_user.id)
    
    async with async_session() as session:
        user_service = UserService(session)
        conv_service = ConversationService(session)
        gpt_service = GPTService()
        rhythm_service = RhythmService()
        
        # Get user
        user = await user_service.get_or_create_user(telegram_id)
        
        # Check if user completed onboarding
        if not user.terms_accepted or not user.name:
            onboarding_text = "üåü <b>–î–∞–≤–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!</b>\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
            keyboard = OnboardingUX.create_button_keyboard([
                ("üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "start_onboarding")
            ])
            await UXHelper.smooth_answer(
                message, 
                onboarding_text, 
                reply_markup=keyboard,
                typing_delay=0.8
            )
            return
        
        # Show typing indicator IMMEDIATELY after receiving message
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        # Check if user can send messages
        limit_check = await conv_service.can_user_send_message(user)
        
        if not limit_check['can_send']:
            await show_paywall(message, limit_check)
            return
        
        try:
            # Start continuous typing task for long operations
            typing_task = asyncio.create_task(
                rhythm_service._maintain_typing_indicator(message.bot, message.chat.id)
            )
            
            # Load settings from Redis cache (much faster than 6 DB queries)
            settings_dict = await settings_cache.get_bot_settings()
            
            # Execute database operations efficiently
            conversation = await conv_service.get_or_create_active_conversation(user)
            await conv_service.add_message(conversation, "user", message.text or "")
            history = await conv_service.get_conversation_history(conversation)
            
            # Get memory context if enabled
            if settings_dict['long_memory_enabled']:
                enhanced_context = await conv_service.get_enhanced_conversation_context(user, history)
                memory_anchors = enhanced_context.get('memory_anchors', [])
            else:
                memory_anchors = []
            
            # Prepare user profile for GPT
            user_profile = {
                'name': user.name,
                'age': user.age,
                'gender': user.gender,
                'emotion_tags': user.emotion_tags or [],
                'topic_tags': user.topic_tags or [],
                'memory_anchors': memory_anchors
            }
            
            # Stop the continuous typing task before GPT call (GPT service has its own typing)
            typing_task.cancel()
            try:
                await typing_task
            except asyncio.CancelledError:
                pass
            
            # Generate response with continued typing
            gpt_response = await gpt_service.generate_response(
                message.text or "",
                user_profile,
                history,
                settings_dict,
                bot=message.bot,
                chat_id=message.chat.id
            )
            
            # Handle crisis response
            if gpt_response['is_crisis']:
                await handle_crisis_response(message, user, user_service, conv_service, conversation)
                return
            
            # Consume daily message (only for non-subscribers)
            await conv_service.consume_daily_message(user)
            
            # Add assistant message to conversation
            await conv_service.add_message(
                conversation, 
                "assistant", 
                gpt_response['response'],
                gpt_response['token_count']
            )
            
            # Send response with beautiful rhythm (pass settings to avoid DB calls)
            await rhythm_service.send_blocks_with_rhythm(
                message, 
                gpt_response['blocks'], 
                user.id,  # type: ignore
                settings_dict  # Pass settings to avoid additional DB queries
            )
            print(f"[DEBUG] GPT response sent, checking limit warning: remaining={limit_check.get('remaining')}")
            
            # Log message event
            await user_service.log_event(
                user.id,  # type: ignore 
                "message_out",
                {
                    'token_count': gpt_response['token_count'],
                    'blocks_count': len(gpt_response['blocks'])
                }
            )
            
            # Show remaining daily messages warning AFTER sending response
            print(f"[DEBUG] Checking warning: reason={limit_check.get('reason')}, remaining={limit_check.get('remaining')}")
            if limit_check['reason'] == 'daily_free_limit' and limit_check['remaining'] <= 2:
                # Update remaining count after consumption
                remaining_after = limit_check['remaining'] - 1
                print(f"[DEBUG] Showing warning: remaining_after={remaining_after}")
                if remaining_after > 0:
                    warning_text = f"‚è∞ <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n–û—Å—Ç–∞–ª–æ—Å—å <b>{remaining_after}</b> –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
                    await UXHelper.smooth_answer(
                        message, 
                        warning_text,
                        typing_delay=0.5
                    )
            
        except Exception as e:
            # Beautiful error handling with RhythmService
            await rhythm_service.send_error_with_retry(
                message,
                "üòî <b>–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</b>\n\n–ö–∞–∂–µ—Ç—Å—è, —è —Å–ª–∏—à–∫–æ–º –≥–ª—É–±–æ–∫–æ –∑–∞–¥—É–º–∞–ª—Å—è... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑?",
                "retry_dialog"
            )
            print(f"Dialog error: {e}")


async def send_response_blocks(message: types.Message, blocks: list, settings_dict: dict):
    """Send response blocks with natural delays and beautiful UX"""
    
    delay_min = settings_dict['delay_between_blocks_min'] / 1000  # Convert to seconds
    delay_max = settings_dict['delay_between_blocks_max'] / 1000
    
    for i, block in enumerate(blocks):
        if i > 0:  # No delay before first block
            # Random delay between blocks
            import random
            delay = random.uniform(delay_min, delay_max)
            await asyncio.sleep(delay)
        
        # Show typing action with UX helper
        await UXHelper.typing_action(message.chat.id, message.bot, duration=1.0)
        
        # No action buttons needed
        keyboard = None
        
        await message.answer(block, reply_markup=keyboard, parse_mode="HTML")


async def show_paywall(message: types.Message, limit_check: dict):
    """Show beautiful subscription paywall"""
    
    if limit_check['reason'] == 'daily_limit_exceeded':
        text = f"üö´ <b>–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n"
        text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{limit_check['used']}/{limit_check['limit']}</b> —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        text += "üåÖ –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞\n"
        text += "‚ú® –ò–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è"
    else:
        text = "üîí <b>–ù—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞"
    
    keyboard = OnboardingUX.create_button_keyboard([
        ("üí≥ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "show_subscription")
    ])
    
    await UXHelper.smooth_answer(
        message, 
        text, 
        reply_markup=keyboard,
        typing_delay=1.0
    )


async def handle_crisis_response(message, user, user_service, conv_service, conversation):
    """Handle crisis situation with enhanced UX"""
    from datetime import datetime, timedelta
    from shared.models.crisis import CrisisEvent
    
    # Set user in crisis mode with freeze timer
    user.is_in_crisis = True
    user.crisis_freeze_until = datetime.utcnow() + timedelta(hours=12)  # 12-hour freeze
    
    await user_service.session.commit()
    
    # Create crisis event record
    crisis_event = CrisisEvent(
        user_id=user.id,
        trigger_words=message.text[:200],  # Store first 200 chars of trigger message
        severity="HIGH",
        is_resolved=False,
        safety_contacts_shown=False,
        user_confirmed_safety=False
    )
    user_service.session.add(crisis_event)
    
    # Log crisis event
    await user_service.log_event(user.id, "crisis_triggered")
    
    # Add crisis message to conversation
    await conv_service.add_message(conversation, "assistant", "CRISIS_RESPONSE", is_crisis_related=True)
    
    # Show empathetic crisis response with safety buttons
    crisis_text = (
        "ü§ó <b>–Ø –æ—á–µ–Ω—å –ø–µ—Ä–µ–∂–∏–≤–∞—é –∑–∞ —Ç–µ–±—è</b>\n\n"
        "–ú–Ω–µ –∂–∞–ª—å, —á—Ç–æ —Ç–µ–±–µ —Å–µ–π—á–∞—Å —Ç–∞–∫ —Ç—è–∂–µ–ª–æ. –Ø –Ω–µ –º–æ–≥—É –∑–∞–º–µ–Ω–∏—Ç—å –∂–∏–≤–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, –Ω–æ —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –ø–æ–ª—É—á–∏–ª –ø–æ–º–æ—â—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n\n"
        "üÜò <b>–í —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∑–≤–æ–Ω–∏: 112</b>"
    )
    
    keyboard = OnboardingUX.create_button_keyboard([
        ("üÜò –ù–∞–π—Ç–∏ –ø–æ–º–æ—â—å —Ä—è–¥–æ–º", "show_crisis_help"),
        ("‚úÖ –Ø –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "crisis_safe")
    ], rows=2)
    
    await UXHelper.smooth_answer(
        message, 
        crisis_text, 
        reply_markup=keyboard,
        typing_delay=1.5
    )


# Button handlers removed for cleaner conversation flow


def register_dialog_handlers(dp: Dispatcher):
    # Regular message handler (lowest priority)
    dp.message.register(dialog_message_handler, F.text)