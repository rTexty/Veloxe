from aiogram import Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import sys
sys.path.append('../../../')

from shared.config.database import async_session
from services.user_service import UserService


async def show_main_menu() -> ReplyKeyboardMarkup:
    """Create main reply keyboard menu"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üôã –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
                KeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"),
                KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
            ],
            [
                KeyboardButton(text="üí≠ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"),
                KeyboardButton(text="üîÑ –ù–æ–≤–∞—è —Ç–µ–º–∞")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard


async def menu_handler(message: types.Message):
    """Show main menu (/menu command)"""
    
    telegram_id = str(message.from_user.id)
    
    async with async_session() as session:
        user_service = UserService(session)
        user = await user_service.get_or_create_user(telegram_id)
        
        # Check if user completed onboarding
        if not user.terms_accepted or not user.name:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: /start")
            return
    
    main_menu = await show_main_menu()


async def handle_unknown_command(message: types.Message):
    """Handle unknown commands and provide help"""
    
    if message.text and message.text.startswith('/'):
        await message.answer(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "‚Ä¢ /profile ‚Äî –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
            "‚Ä¢ /menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ /help ‚Äî –ø–æ–º–æ—â—å"
        )


async def continue_dialog_handler(message: types.Message):
    """Handle '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' button - generate next GPT response without new input"""
    from .dialog import dialog_message_handler
    
    # Create a fake message to trigger dialog continuation
    fake_message = message
    fake_message.text = "–ü—Ä–æ–¥–æ–ª–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
    
    await dialog_message_handler(fake_message)


async def new_topic_handler(message: types.Message):
    """Handle '–ù–æ–≤–∞—è —Ç–µ–º–∞' button - ask for confirmation and start new session"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    confirm_text = "üîÑ <b>–ù–æ–≤–∞—è —Ç–µ–º–∞</b>\n\n–°–≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∏ –Ω–∞—á–∞—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —á–µ–≥–æ-—Ç–æ –Ω–æ–≤–æ–≥–æ?"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –Ω–æ–≤–∞—è —Ç–µ–º–∞", callback_data="confirm_new_topic"),
            InlineKeyboardButton(text="‚ùå –û—Å—Ç–∞—Ç—å—Å—è –∑–¥–µ—Å—å", callback_data="cancel_new_topic")
        ]
    ])
    
    await message.answer(confirm_text, reply_markup=keyboard, parse_mode="HTML")


async def confirm_new_topic_handler(callback: types.CallbackQuery):
    """Confirm starting new topic"""
    telegram_id = str(callback.from_user.id)
    
    async with async_session() as session:
        user_service = UserService(session)
        from services.conversation_service import ConversationService
        conv_service = ConversationService(session)
        
        user = await user_service.get_or_create_user(telegram_id)
        
        # Close current conversation
        conversation = await conv_service.get_or_create_active_conversation(user)
        await conv_service.close_conversation(conversation)
        
        await callback.message.edit_text(
            "‚ú® <b>–ù–æ–≤–∞—è —Ç–µ–º–∞ –Ω–∞—á–∞—Ç–∞!</b>\n\n–û —á—ë–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?",
            parse_mode="HTML"
        )


async def cancel_new_topic_handler(callback: types.CallbackQuery):
    """Cancel new topic"""
    await callback.message.edit_text(
        "üîÑ <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É</b>\n\n–ß—Ç–æ —É –≤–∞—Å –Ω–∞ –¥—É—à–µ?",
        parse_mode="HTML"
    )


def register_menu_handlers(dp: Dispatcher):
    dp.message.register(menu_handler, Command("menu"))
    dp.message.register(handle_unknown_command, F.text.startswith("/"))
    
    # Dialog control buttons
    dp.message.register(continue_dialog_handler, F.text == "üí≠ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    dp.message.register(new_topic_handler, F.text == "üîÑ –ù–æ–≤–∞—è —Ç–µ–º–∞")
    
    # Callback handlers for new topic confirmation
    dp.callback_query.register(confirm_new_topic_handler, F.data == "confirm_new_topic")
    dp.callback_query.register(cancel_new_topic_handler, F.data == "cancel_new_topic")