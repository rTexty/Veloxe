from aiogram import Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import sys
sys.path.append('../../../')

from shared.config.database import async_session
from services.user_service import UserService
from services.settings_service import SettingsService
from shared.models.crisis import CrisisEvent


async def show_crisis_help_handler(callback: types.CallbackQuery):
    """Show crisis help contacts"""
    
    help_text = """üÜò –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–û–ú–û–©–¨

üìû –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –≥–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è:
8 800 2000 122 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)

üöë –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã: 112

üí¨ –û–Ω–ª–∞–π–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∞:
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-495-988-44-34
‚Ä¢ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: pomogi.org

–ï—Å–ª–∏ —Ç—ã –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å - –∑–≤–æ–Ω–∏ 112 –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –±–ª–∏–∑–∫–∏–º –ª—é–¥—è–º."""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", callback_data="crisis_safe")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_message")]
    ])
    
    await callback.message.edit_text(help_text, reply_markup=keyboard)


async def crisis_safe_handler(callback: types.CallbackQuery):
    """Handle user confirming they are safe"""
    
    await callback.message.edit_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ: '–Ø –Ω–µ –ø—Ä–∏—á–∏–Ω—é —Å–µ–±–µ –≤—Ä–µ–¥' —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    )


async def handle_crisis_resolution(message: types.Message):
    """Handle crisis resolution phrase"""
    
    safety_phrases = [
        "—è –Ω–µ –ø—Ä–∏—á–∏–Ω—é —Å–µ–±–µ –≤—Ä–µ–¥",
        "—è –Ω–µ –ø—Ä–∏—á–∏–Ω—é —Å–µ–±–µ –≤—Ä–µ–¥–∞", 
        "–Ω–µ –ø—Ä–∏—á–∏–Ω—é —Å–µ–±–µ –≤—Ä–µ–¥",
        "–Ω–µ –ø—Ä–∏—á–∏–Ω—é –≤—Ä–µ–¥"
    ]
    
    user_text = message.text.lower().strip()
    
    if any(phrase in user_text for phrase in safety_phrases):
        telegram_id = str(message.from_user.id)
        
        async with async_session() as session:
            user_service = UserService(session)
            
            # Get user
            user = await user_service.get_or_create_user(telegram_id)
            
            if user.is_in_crisis:
                # Mark user as safe
                user.is_in_crisis = False
                user.crisis_freeze_until = None
                
                # Log crisis resolution
                await user_service.log_event(user.id, "crisis_resolved")
                
                # Create crisis event record
                crisis_event = CrisisEvent(
                    user_id=user.id,
                    is_resolved=True,
                    resolved_at=datetime.utcnow(),
                    resolution_method="safety_phrase",
                    user_confirmed_safety=True
                )
                session.add(crisis_event)
                
                await session.commit()
                
                await message.answer(
                    "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –Ø —Ä—è–¥–æ–º, –µ—Å–ª–∏ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å."
                )
                return True
    
    return False


# cancel_message_handler is now universal in dialog.py


def register_crisis_handlers(dp: Dispatcher):
    dp.callback_query.register(show_crisis_help_handler, F.data == "show_crisis_help")
    dp.callback_query.register(crisis_safe_handler, F.data == "crisis_safe")
    # cancel_message_handler is universal in dialog.py