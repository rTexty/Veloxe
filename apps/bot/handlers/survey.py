from aiogram import Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import sys
sys.path.append('../../../')

from shared.config.database import async_session
from services.user_service import UserService
from services.settings_service import SettingsService
from utils.ux_helper import UXHelper, OnboardingUX, AnimatedMessages


class SurveyStates(StatesGroup):
    waiting_name = State()
    waiting_age = State()
    waiting_gender = State()
    waiting_city = State()
    waiting_emotions = State()
    waiting_topics = State()
    confirming = State()


async def survey_name_handler(callback: types.CallbackQuery, state: FSMContext):
    question_text = OnboardingUX.format_survey_question(
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        1, 6,
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ –∏–º–µ–Ω–∏ üòä"
    )
    
    await UXHelper.smooth_edit_text(
        callback.message,
        question_text,
        typing_delay=0.8
    )
    await state.set_state(SurveyStates.waiting_name)


async def name_input_handler(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    
    keyboard = OnboardingUX.create_button_keyboard([
        ("üéÇ –£–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", "survey_age"),
        ("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "survey_gender")
    ])
    
    response_text = f"üåü <b>–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}!</b>\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ?"
    
    await UXHelper.smooth_answer(
        message, 
        response_text, 
        reply_markup=keyboard,
        typing_delay=1.0
    )


async def survey_age_handler(callback: types.CallbackQuery, state: FSMContext):
    question_text = OnboardingUX.format_survey_question(
        "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
        2, 6,
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ üî¢"
    )
    
    await UXHelper.smooth_edit_text(
        callback.message,
        question_text,
        typing_delay=0.6
    )
    await state.set_state(SurveyStates.waiting_age)


async def age_input_handler(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        if 10 <= age <= 120:
            await state.update_data(age=age)
            await show_gender_selection(message)
        else:
            await UXHelper.smooth_answer(
                message,
                "ü§î –ü–æ—Ö–æ–∂–µ, –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ–æ–±—ã—á–Ω—ã–π...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (10-120 –ª–µ—Ç)",
                typing_delay=0.5
            )
    except ValueError:
        await UXHelper.smooth_answer(
            message,
            "üòÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä–∞–º–∏",
            typing_delay=0.5
        )


async def survey_gender_handler(callback: types.CallbackQuery, state: FSMContext):
    await show_gender_selection(callback.message)


async def show_gender_selection(message: types.Message):
    question_text = OnboardingUX.format_survey_question(
        "–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
        3, 6,
        "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"
    )
    
    keyboard = OnboardingUX.create_button_keyboard([
        ("üë® –ú—É–∂—Å–∫–æ–π", "gender_male"),
        ("üë© –ñ–µ–Ω—Å–∫–∏–π", "gender_female"),
        ("ü§∑ –ù–µ –≤–∞–∂–Ω–æ", "gender_not_applicable"),
        ("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "survey_city")
    ], rows=2)
    
    await UXHelper.smooth_answer(
        message, 
        question_text, 
        reply_markup=keyboard,
        typing_delay=0.8
    )


async def gender_handler(callback: types.CallbackQuery, state: FSMContext):
    gender_map = {
        "gender_male": "male",
        "gender_female": "female", 
        "gender_not_applicable": "not_applicable"
    }
    
    await state.update_data(gender=gender_map[callback.data])
    
    question_text = OnboardingUX.format_survey_question(
        "–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?",
        4, 6,
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å üåç"
    )
    
    await UXHelper.smooth_edit_text(
        callback.message,
        question_text,
        typing_delay=0.6
    )
    await state.set_state(SurveyStates.waiting_city)


async def survey_city_handler(callback: types.CallbackQuery, state: FSMContext):
    question_text = OnboardingUX.format_survey_question(
        "–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?",
        4, 6,
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å üåç"
    )
    
    await UXHelper.smooth_edit_text(
        callback.message,
        question_text,
        typing_delay=0.6
    )
    await state.set_state(SurveyStates.waiting_city)


async def city_input_handler(message: types.Message, state: FSMContext):
    from utils.timezone_helper import TimezoneHelper
    
    city = message.text.strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
    timezone = TimezoneHelper.get_timezone_from_city(city)
    if not timezone:
        timezone = "Europe/Moscow"  # Fallback to Moscow
    
    await state.update_data(city=city, timezone=timezone)
    
    # Transition message
    transition_text = f"üèôÔ∏è <b>{message.text}</b> ‚Äî –∫—Ä–∞—Å–∏–≤—ã–π –≥–æ—Ä–æ–¥!\n\n‚è≠Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É..."
    transition_msg = await UXHelper.smooth_answer(
        message, 
        transition_text,
        typing_delay=1.0
    )
    
    await show_emotions_selection(transition_msg)


async def show_emotions_selection(message: types.Message):
    async with async_session() as session:
        settings_service = SettingsService(session)
        
        emotions = await settings_service.get_setting("emotion_tags", [
            "üò∞ —Ç—Ä–µ–≤–æ–≥–∞", "üò• —á—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã", "üò° –∑–ª–æ—Å—Ç—å", "üòû —É—Å—Ç–∞–ª–æ—Å—Ç—å",
            "üòî –≥—Ä—É—Å—Ç—å", "üò® —Å—Ç—Ä–∞—Ö", "üò§ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ", "üòü –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ"
        ])
    
    question_text = OnboardingUX.format_survey_question(
        "–ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ —á–∞—Å—Ç–æ —Å –≤–∞–º–∏?",
        5, 6,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ üí≠"
    )
    
    keyboard = OnboardingUX.create_selection_keyboard(
        emotions, 
        "emotion",
        max_cols=2,
        done_text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    )
    
    await UXHelper.smooth_edit_text(
        message,
        question_text,
        reply_markup=keyboard,
        typing_delay=1.2
    )


async def emotion_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_emotions = data.get("selected_emotions", set())
    
    emotion_index = callback.data.replace("emotion_", "")
    
    if emotion_index in selected_emotions:
        selected_emotions.remove(emotion_index)
        await callback.answer(f"‚ùå –£–±—Ä–∞–ª. –í—ã–±—Ä–∞–Ω–æ: {len(selected_emotions)}")
    else:
        if len(selected_emotions) < 10:
            selected_emotions.add(emotion_index)
            await callback.answer(f"‚úÖ –î–æ–±–∞–≤–∏–ª! –í—ã–±—Ä–∞–Ω–æ: {len(selected_emotions)}")
        else:
            await callback.answer("–ú–∞–∫—Å–∏–º—É–º 10 —ç–º–æ—Ü–∏–π üòä")
    
    await state.update_data(selected_emotions=selected_emotions)
    
    # Update keyboard to show selections
    async with async_session() as session:
        settings_service = SettingsService(session)
        emotions = await settings_service.get_setting("emotion_tags", [
            "üò∞ —Ç—Ä–µ–≤–æ–≥–∞", "üò• —á—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã", "üò° –∑–ª–æ—Å—Ç—å", "üòû —É—Å—Ç–∞–ª–æ—Å—Ç—å",
            "üòî –≥—Ä—É—Å—Ç—å", "üò® —Å—Ç—Ä–∞—Ö", "üò§ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ", "üòü –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ"
        ])
    
    keyboard = OnboardingUX.create_selection_keyboard(
        emotions, 
        "emotion",
        selected_indices=selected_emotions,
        max_cols=2,
        done_text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    )
    
    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    except Exception:
        pass  # Ignore if message is the same


async def emotions_done_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_count = len(data.get("selected_emotions", set()))
    
    if selected_count == 0:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —ç–º–æ—Ü–∏—é üòä")
        return
        
    # Nice transition
    transition_text = f"‚ú® –û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω–æ {selected_count} —ç–º–æ—Ü–∏–π\n\n‚è≠Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥..."
    await UXHelper.smooth_edit_text(
        callback.message,
        transition_text,
        typing_delay=0.8
    )
    
    await show_topics_selection(callback.message)


async def show_topics_selection(message: types.Message):
    async with async_session() as session:
        settings_service = SettingsService(session)
        
        topics = await settings_service.get_setting("topic_tags", [
            "üíº —Ä–∞–±–æ—Ç–∞", "‚ù§Ô∏è –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "üë®‚Äçüë©‚Äçüëß —Å–µ–º—å—è", "üè• –∑–¥–æ—Ä–æ–≤—å–µ",
            "üí∞ –¥–µ–Ω—å–≥–∏", "üéì —É—á–µ–±–∞", "ü§ù –¥—Ä—É–∑—å—è", "üè† –±—ã—Ç"
        ])
    
    question_text = OnboardingUX.format_survey_question(
        "–ö–∞–∫–∏–µ —Ç–µ–º—ã –≤–∞—Å –≤–æ–ª–Ω—É—é—Ç?",
        6, 6,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 8 —Ç–µ–º, –æ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å üí¨"
    )
    
    keyboard = OnboardingUX.create_selection_keyboard(
        topics, 
        "topic",
        max_cols=2,
        done_text="üéâ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
    )
    
    await UXHelper.smooth_edit_text(
        message,
        question_text,
        reply_markup=keyboard,
        typing_delay=1.0
    )


async def topic_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_topics = data.get("selected_topics", set())
    
    topic_index = callback.data.replace("topic_", "")
    
    if topic_index in selected_topics:
        selected_topics.remove(topic_index)
        await callback.answer(f"‚ùå –£–±—Ä–∞–ª. –í—ã–±—Ä–∞–Ω–æ: {len(selected_topics)}")
    else:
        if len(selected_topics) < 8:
            selected_topics.add(topic_index)
            await callback.answer(f"‚úÖ –î–æ–±–∞–≤–∏–ª! –í—ã–±—Ä–∞–Ω–æ: {len(selected_topics)}")
        else:
            await callback.answer("–ú–∞–∫—Å–∏–º—É–º 8 —Ç–µ–º üòä")
    
    await state.update_data(selected_topics=selected_topics)
    
    # Update keyboard to show selections
    async with async_session() as session:
        settings_service = SettingsService(session)
        topics = await settings_service.get_setting("topic_tags", [
            "üíº —Ä–∞–±–æ—Ç–∞", "‚ù§Ô∏è –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "üë®‚Äçüë©‚Äçüëß —Å–µ–º—å—è", "üè• –∑–¥–æ—Ä–æ–≤—å–µ",
            "üí∞ –¥–µ–Ω—å–≥–∏", "üéì —É—á–µ–±–∞", "ü§ù –¥—Ä—É–∑—å—è", "üè† –±—ã—Ç"
        ])
    
    keyboard = OnboardingUX.create_selection_keyboard(
        topics, 
        "topic",
        selected_indices=selected_topics,
        max_cols=2,
        done_text="üéâ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
    )
    
    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    except Exception:
        pass  # Ignore if message is the same


async def topics_done_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_count = len(data.get("selected_topics", set()))
    
    if selected_count == 0:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É üòä")
        return
        
    await show_confirmation(callback.message, state)


async def show_confirmation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    # Get selected emotion/topic counts
    emotions_count = len(data.get('selected_emotions', set()))
    topics_count = len(data.get('selected_topics', set()))
    
    # Build beautiful confirmation text
    text = "üéâ <b>–û—Ç–ª–∏—á–Ω–æ! –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞</b>\n\n"
    text += "üìù <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
    
    # Personal info
    if data.get('name'):
        text += f"‚Ä¢ üë§ –ò–º—è: <b>{data.get('name')}</b>\n"
    if data.get('age'):
        text += f"‚Ä¢ üéÇ –í–æ–∑—Ä–∞—Å—Ç: <b>{data.get('age')} –ª–µ—Ç</b>\n"
    if data.get('city'):
        text += f"‚Ä¢ üèôÔ∏è –ì–æ—Ä–æ–¥: <b>{data.get('city')}</b>\n"
    
    text += f"\n‚Ä¢ üí≠ –≠–º–æ—Ü–∏–π –≤—ã–±—Ä–∞–Ω–æ: <b>{emotions_count}</b>"
    text += f"\n‚Ä¢ üí¨ –¢–µ–º –≤—ã–±—Ä–∞–Ω–æ: <b>{topics_count}</b>\n\n"
    
    text += "–í—Å—ë –≤–µ—Ä–Ω–æ? –í—ã –º–æ–∂–µ—Ç–µ —Å –ª—ë–≥–∫–æ—Å—Ç—å—é —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –º–µ–Ω—é."
    
    keyboard = OnboardingUX.create_button_keyboard([
        ("‚úÖ –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ!", "survey_confirm"),
        ("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "survey_edit")
    ])
    
    await UXHelper.smooth_edit_text(
        message,
        text,
        reply_markup=keyboard,
        typing_delay=1.5
    )


async def survey_confirm_handler(callback: types.CallbackQuery, state: FSMContext):
    telegram_id = str(callback.from_user.id)
    user_name = callback.from_user.first_name or "–¥—Ä—É–≥"
    data = await state.get_data()
    
    # Show completion animation
    completion_steps = [
        "‚ú® –°–æ—Ö—Ä–∞–Ω—è—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...",
        "üß† –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é...",
        "üéØ –ì–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–π –æ–ø—ã—Ç..."
    ]
    
    final_text = f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {data.get('name', user_name)}!</b>\n\n–¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é –≤–∞—Å –ª—É—á—à–µ –∏ —Å–º–æ–≥—É:\n‚Ä¢ üí¨ –ü–æ–Ω–∏–º–∞—Ç—å –≤–∞—à–∏ —ç–º–æ—Ü–∏–∏\n‚Ä¢ üéØ –ü–æ–¥–±–∏—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–æ–≤–µ—Ç—ã\n‚Ä¢ üåü –°–æ–∑–¥–∞—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É\n\nüí≠ <b>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —É –≤–∞—Å –Ω–∞ –¥—É—à–µ?</b>"
    
    await UXHelper.progress_edit(
        callback.message,
        completion_steps,
        final_text,
        step_delay=1.0
    )
    
    async with async_session() as session:
        user_service = UserService(session)
        
        # Get user and update profile
        user = await user_service.get_or_create_user(telegram_id)
        
        user.name = data.get('name')
        user.age = data.get('age')
        user.gender = data.get('gender')
        user.city = data.get('city')
        user.timezone = data.get('timezone')
        user.emotion_tags = list(data.get('selected_emotions', []))
        user.topic_tags = list(data.get('selected_topics', []))
        
        await session.commit()
        
        # Log survey completion
        await user_service.log_event(user.id, "onboarding_done")
    
    # Show main menu after completing survey
    from .profile import show_main_menu
    main_menu = await show_main_menu()
    
    await UXHelper.smooth_answer(
        callback.message,
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
        reply_markup=main_menu,
        typing_delay=1.5
    )
    await state.clear()


def register_survey_handlers(dp: Dispatcher):
    dp.callback_query.register(survey_name_handler, F.data == "survey_name")
    dp.message.register(name_input_handler, SurveyStates.waiting_name)
    
    dp.callback_query.register(survey_age_handler, F.data == "survey_age")
    dp.message.register(age_input_handler, SurveyStates.waiting_age)
    
    dp.callback_query.register(survey_gender_handler, F.data == "survey_gender")
    dp.callback_query.register(gender_handler, F.data.startswith("gender_"))
    
    dp.callback_query.register(survey_city_handler, F.data == "survey_city")
    dp.message.register(city_input_handler, SurveyStates.waiting_city)
    
    dp.callback_query.register(emotion_handler, F.data.startswith("emotion_") & ~F.data.endswith("_done"))
    dp.callback_query.register(emotions_done_handler, F.data == "emotion_done")
    
    dp.callback_query.register(topic_handler, F.data.startswith("topic_") & ~F.data.endswith("_done"))
    dp.callback_query.register(topics_done_handler, F.data == "topic_done")
    
    dp.callback_query.register(survey_confirm_handler, F.data == "survey_confirm")