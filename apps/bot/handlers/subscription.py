from aiogram import Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, PreCheckoutQuery, SuccessfulPayment
from datetime import datetime, timedelta
import sys
sys.path.append('../../../')

from shared.config.database import async_session
from services.user_service import UserService
from services.settings_service import SettingsService
from services.conversation_service import ConversationService
from services.payment_service import PaymentService
from utils.ux_helper import UXHelper


async def show_subscription_handler(callback: types.CallbackQuery):
    """Show subscription plans"""
    
    async with async_session() as session:
        settings_service = SettingsService(session)
        
        plans = await settings_service.get_setting("subscription_plans", [])
    
    if not plans:
        await callback.message.edit_text(
            "‚ö†Ô∏è –¢–∞—Ä–∏—Ñ—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    text = "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è:\n\n"
    
    keyboard_rows = []
    for plan in plans:
        price_text = f"${plan['price']:.2f}" if plan['currency'] == 'USD' else f"{plan['price']:.2f} {plan['currency']}"
        text += f"‚Ä¢ {plan['days']} –¥–Ω–µ–π ‚Äî {price_text}\n"
        
        keyboard_rows.append([
            InlineKeyboardButton(
                text=f"{plan['days']} –¥–Ω–µ–π ‚Äî {price_text}",
                callback_data=f"select_plan_{plan['name']}"
            )
        ])
    
    keyboard_rows.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_dialog")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    await callback.message.edit_text(text, reply_markup=keyboard)


async def select_plan_handler(callback: types.CallbackQuery):
    """Handle plan selection"""
    
    plan_name = callback.data.replace("select_plan_", "")
    
    async with async_session() as session:
        settings_service = SettingsService(session)
        
        plans = await settings_service.get_setting("subscription_plans", [])
        selected_plan = next((p for p in plans if p['name'] == plan_name), None)
        
        if not selected_plan:
            await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
    
    price_text = f"${selected_plan['price']:.2f}"
    
    text = f"–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {selected_plan['days']} –¥–Ω–µ–π ‚Äî {price_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Telegram Stars", callback_data=f"pay_stars_{plan_name}")],
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π", callback_data=f"pay_card_{plan_name}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_subscription")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)


async def pay_stars_handler(callback: types.CallbackQuery):
    """Handle Telegram Stars payment"""
    
    plan_name = callback.data.replace("pay_stars_", "")
    user_id = callback.from_user.id
    
    payment_service = PaymentService()
    invoice_data, error = await payment_service.create_telegram_stars_invoice(user_id, plan_name)
    
    if error:
        # Truncate error message to avoid MESSAGE_TOO_LONG error
        error_msg = error[:100]  # Limit to 100 characters
        await callback.answer(f"–û—à–∏–±–∫–∞: {error_msg}")
        return
    
    try:
        await callback.bot.send_invoice(
            chat_id=callback.message.chat.id,
            title=invoice_data["title"],
            description=invoice_data["description"],
            provider_token=invoice_data["provider_token"],
            currency=invoice_data["currency"],
            prices=invoice_data["prices"],
            start_parameter=invoice_data["start_parameter"],
            payload=invoice_data["payload"]
        )
        
        
    except Exception as e:
        # Truncate error message to avoid MESSAGE_TOO_LONG error
        error_msg = str(e)[:100]  # Limit to 100 characters
        await callback.answer(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: {error_msg}")
        
        # Fallback to card payment
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Çø –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π", callback_data=f"pay_card_{plan_name}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_plan_{plan_name}")]
        ])
        
        await callback.message.edit_text(
            "‚≠ê Telegram Stars –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π:",
            reply_markup=keyboard
        )


async def pay_card_handler(callback: types.CallbackQuery):
    """Handle card payment via CryptoCloud"""
    
    plan_name = callback.data.replace("pay_card_", "")
    user_id = callback.from_user.id
    
    # Show loading message
    await UXHelper.smooth_edit_text(
        callback.message,
        "‚Çø –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π...",
        typing_delay=1.0
    )
    
    payment_service = PaymentService()
    payment_data, error = await payment_service.create_cryptocloud_invoice(user_id, plan_name)
    
    if error:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚≠ê Telegram Stars", callback_data=f"pay_stars_{plan_name}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_plan_{plan_name}")]
        ])
        
        # Truncate error message to avoid MESSAGE_TOO_LONG error
        error_msg = error[:200]  # Limit to 200 characters for longer messages
        await callback.message.edit_text(
            f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=keyboard
        )
        return
    
    # Show payment link
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_data["url"])],
        [InlineKeyboardButton(text="‚≠ê Telegram Stars", callback_data=f"pay_stars_{plan_name}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_plan_{plan_name}")]
    ])
    
    text = f"""‚Çø –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π

–°—É–º–º–∞: {payment_data['amount']} RUB

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ñ–æ—Ä–º–µ –æ–ø–ª–∞—Ç—ã. 
–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."""
    
    await callback.message.edit_text(text, reply_markup=keyboard)


async def back_to_dialog_handler(callback: types.CallbackQuery):
    """Return to dialog"""
    await callback.message.edit_text("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—â–µ–Ω–∏–µ. –û —á—ë–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?")


async def remind_later_handler(callback: types.CallbackQuery):
    """Handle 'remind later' button from subscription reminders"""
    await callback.answer("–•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω–∏–º –ø–æ–∑–∂–µ!")
    await callback.message.edit_text("üëç –ü–æ–Ω—è—Ç–Ω–æ, –Ω–∞–ø–æ–º–Ω–∏–º –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∑–∂–µ.\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—â–µ–Ω–∏–µ!")


# Mock function for successful payment (to be replaced with real payment processing)
async def process_successful_payment(user_id: int, plan_name: str, payment_provider: str, payment_id: str):
    """Process successful payment and activate subscription"""
    
    async with async_session() as session:
        user_service = UserService(session)
        settings_service = SettingsService(session)
        conv_service = ConversationService(session)
        
        # Get plan details
        plans = await settings_service.get_setting("subscription_plans", [])
        plan = next((p for p in plans if p['name'] == plan_name), None)
        
        if not plan:
            return False
        
        # Get user
        result = await session.execute(
            select(User).where(User.id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            return False
        
        # Get or create subscription
        from sqlalchemy import select, desc
        from shared.models.user import User
        from shared.models.subscription import Subscription
        
        result = await session.execute(
            select(Subscription)
            .where(Subscription.user_id == user_id)
            .order_by(desc(Subscription.created_at))
        )
        subscription = result.scalar_one_or_none()
        
        if not subscription:
            # Create new subscription
            subscription = Subscription(
                user_id=user_id,
                plan_name=plan['name'],
                price=plan['price'],
                currency=plan.get('currency', 'USD'),
                starts_at=datetime.utcnow(),
                ends_at=datetime.utcnow() + timedelta(days=plan['days']),
                is_active=True,
                payment_provider=payment_provider,
                payment_id=payment_id
            )
            session.add(subscription)
        else:
            # Update existing subscription
            start_time = max(datetime.utcnow(), subscription.ends_at) if subscription.is_active else datetime.utcnow()
            
            subscription.plan_name = plan['name']
            subscription.price = plan['price']
            subscription.currency = plan.get('currency', 'USD')
            subscription.starts_at = start_time
            subscription.ends_at = start_time + timedelta(days=plan['days'])
            subscription.is_active = True
            subscription.payment_provider = payment_provider
            subscription.payment_id = payment_id
            
            # Reset daily limits for paid users
            subscription.daily_messages_used = 0
            subscription.daily_messages_limit = 999999  # Unlimited for subscribers
        
        await session.commit()
        
        # Log payment success
        await user_service.log_event(user_id, "payment_ok", {
            'plan': plan['name'],
            'price': plan['price'],
            'provider': payment_provider
        })
        
        return True


async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    """Handle pre-checkout query for Telegram Stars"""
    try:
        # Always approve the payment (validation was done during invoice creation)
        await pre_checkout_query.answer(ok=True)
    except Exception as e:
        await pre_checkout_query.answer(
            ok=False, 
            error_message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}"
        )


async def successful_payment_handler(message: types.Message):
    """Handle successful payment"""
    payment = message.successful_payment
    if not payment:
        return
    
    user_id = message.from_user.id
    payment_service = PaymentService()
    
    try:
        success = await payment_service.process_successful_stars_payment(
            user_id, 
            payment.telegram_payment_charge_id,
            payment.invoice_payload
        )
        
        if success:
            await UXHelper.smooth_answer(
                message,
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üéâ",
                typing_delay=1.0
            )
        else:
            await UXHelper.smooth_answer(
                message,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @support —Å –Ω–æ–º–µ—Ä–æ–º –ø–ª–∞—Ç–µ–∂–∞: " + payment.telegram_payment_charge_id,
                typing_delay=0.5
            )
            
    except Exception as e:
        await UXHelper.smooth_answer(
            message,
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @support",
            typing_delay=0.5
        )


def register_subscription_handlers(dp: Dispatcher):
    dp.callback_query.register(show_subscription_handler, F.data == "show_subscription")
    dp.callback_query.register(select_plan_handler, F.data.startswith("select_plan_"))
    dp.callback_query.register(pay_stars_handler, F.data.startswith("pay_stars_"))
    dp.callback_query.register(pay_card_handler, F.data.startswith("pay_card_"))
    dp.callback_query.register(back_to_dialog_handler, F.data == "back_to_dialog")
    dp.callback_query.register(remind_later_handler, F.data == "remind_later")
    
    # Payment handlers
    dp.pre_checkout_query.register(pre_checkout_handler)
    dp.message.register(successful_payment_handler, F.successful_payment)