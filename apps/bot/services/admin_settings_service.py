from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime
import sys
sys.path.append('../../../')

from .settings_service import SettingsService


class AdminSettingsService:
    def __init__(self, session: AsyncSession):
        self.session = session
        self.settings_service = SettingsService(session)
    
    async def initialize_default_settings(self):
        """Initialize default bot settings"""
        
        # Frequent settings (easily changed by admins)
        await self._set_if_not_exists("daily_message_limit", 5, "frequent", "Daily free message limit per user")
        await self._set_if_not_exists("policy_version", "v1", "frequent", "Current privacy policy version")
        
        # Consent texts
        await self._set_if_not_exists(
            "consent_welcome_text", 
            "–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ. ‚ùóÔ∏è–≠—Ç–æ –Ω–µ –∑–∞–º–µ–Ω–∞ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏. –í –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –∑–≤–æ–Ω–∏—Ç–µ 112. üìÑ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Å–ª–æ–≤–∏—è—Ö... –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            "frequent", 
            "Welcome text shown during consent gate"
        )
        
        await self._set_if_not_exists(
            "full_privacy_policy",
            "–ü–æ–ª–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n\n1. –ú—ã –Ω–µ –≤—Ä–∞—á–∏ –∏ –Ω–µ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—ã\n2. –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n3. –í –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º\n4. –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è",
            "frequent",
            "Full privacy policy text"
        )
        
        # Survey texts
        await self._set_if_not_exists(
            "survey_intro_text",
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã —è –º–æ–≥ –ª—É—á—à–µ –≤–∞—Å –ø–æ–Ω–∏–º–∞—Ç—å.",
            "frequent",
            "Survey introduction text"
        )
        
        # Emotion and topic tags
        await self._set_if_not_exists(
            "emotion_tags",
            [
                "üò∞ —Ç—Ä–µ–≤–æ–≥–∞", "üò• —á—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã", "üò° –∑–ª–æ—Å—Ç—å", "üòû —É—Å—Ç–∞–ª–æ—Å—Ç—å",
                "üòî –≥—Ä—É—Å—Ç—å", "üò® —Å—Ç—Ä–∞—Ö", "üò§ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ", "üòü –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ",
                "üò¢ –ø–µ—á–∞–ª—å", "üòÆ‚Äçüí® —Å—Ç—Ä–µ—Å—Å", "üòì –±–µ—Å–ø–æ–º–æ—â–Ω–æ—Å—Ç—å", "üòµ‚Äçüí´ —Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å"
            ],
            "frequent",
            "Available emotion tags for user selection"
        )
        
        await self._set_if_not_exists(
            "topic_tags",
            [
                "üíº —Ä–∞–±–æ—Ç–∞", "‚ù§Ô∏è –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "üë®‚Äçüë©‚Äçüëß —Å–µ–º—å—è", "üè• –∑–¥–æ—Ä–æ–≤—å–µ",
                "üí∞ –¥–µ–Ω—å–≥–∏", "üéì —É—á–µ–±–∞", "ü§ù –¥—Ä—É–∑—å—è", "üè† –±—ã—Ç",
                "üéØ —Ü–µ–ª–∏", "‚öñÔ∏è —Ä–µ—à–µ–Ω–∏—è", "üå± —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", "üò¥ —Å–æ–Ω"
            ],
            "frequent", 
            "Available topic tags for user selection"
        )
        
        # Payment settings
        await self._set_if_not_exists("cryptocloud_api_key", "", "expert", "CryptoCloud API key")
        await self._set_if_not_exists("cryptocloud_shop_id", "", "expert", "CryptoCloud shop ID")
        await self._set_if_not_exists("support_contact", "@support", "frequent", "Support contact username")
        
        # Payment text templates
        await self._set_if_not_exists(
            "payment_success_text",
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üéâ",
            "frequent",
            "Payment success message template"
        )
        
        await self._set_if_not_exists(
            "payment_failed_text",
            "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É {support_contact}",
            "frequent", 
            "Payment failure message template"
        )
        
        await self._set_if_not_exists(
            "subscription_reminder_24h_template",
            "üîî {name}, –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞!\n\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è?",
            "frequent",
            "24-hour subscription reminder template"
        )
        
        await self._set_if_not_exists(
            "subscription_reminder_expiry_template", 
            "‚ö†Ô∏è {name}, –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!\n\n–ü—Ä–æ–¥–ª–∏—Ç–µ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ.",
            "frequent",
            "Expiration day reminder template"
        )
        
        await self._set_if_not_exists("subscription_reminders_enabled", True, "frequent", "Enable subscription expiration reminders")
        
        # Payment retry templates
        await self._set_if_not_exists(
            "payment_retry_template",
            "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt} –∏–∑ {max_attempts})\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã\n‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
            "frequent",
            "Payment retry message template"
        )
        
        await self._set_if_not_exists(
            "payment_max_attempts_template",
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.\n\n–î–ª—è –ø–æ–º–æ—â–∏ —Å –æ–ø–ª–∞—Ç–æ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {support_contact}\n\n–ú—ã –ø–æ–º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã!",
            "frequent",
            "Message when max payment attempts reached"
        )
        
        # Expert settings (advanced configuration)
        await self._set_if_not_exists("memory_window_size", 15, "expert", "Number of recent messages to include in GPT context")
        await self._set_if_not_exists("max_blocks_per_reply", 3, "expert", "Maximum blocks to split GPT response into")
        await self._set_if_not_exists("min_block_length", 30, "expert", "Minimum length of text block before merging")
        await self._set_if_not_exists("delay_between_blocks_min", 2200, "expert", "Minimum delay between blocks in milliseconds")
        await self._set_if_not_exists("delay_between_blocks_max", 4200, "expert", "Maximum delay between blocks in milliseconds")
        await self._set_if_not_exists("typing_duration_base", 1.5, "expert", "Base typing duration in seconds")
        await self._set_if_not_exists("typing_duration_per_word", 0.1, "expert", "Additional typing duration per word in seconds")
        
        # Long-term memory settings
        await self._set_if_not_exists("long_memory_enabled", True, "expert", "Enable long-term memory anchors system")
        await self._set_if_not_exists("memory_anchor_ttl_days", 90, "expert", "Days to keep memory anchors in Redis cache")
        await self._set_if_not_exists("max_anchors_per_user", 20, "expert", "Maximum memory anchors per user")
        
        # Crisis settings
        await self._set_if_not_exists(
            "crisis_keywords",
            [
                "—É–º–µ—Ä–µ—Ç—å", "—É–º—Ä—É", "—Å—É–∏—Ü–∏–¥", "–ø–æ–∫–æ–Ω—á–∏—Ç—å", "–ø–æ–≤–µ—Å–∏—Ç—å—Å—è", 
                "—É–±–∏—Ç—å —Å–µ–±—è", "–Ω–µ —Ö–æ—á—É –∂–∏—Ç—å", "–Ω–µ—Ç —Å–º—ã—Å–ª–∞ –∂–∏—Ç—å", "–∫–æ–Ω–µ—Ü",
                "–ø—Ä—ã–≥–Ω—É—Ç—å", "—Ç–∞–±–ª–µ—Ç–∫–∏", "—Å–º–µ—Ä—Ç—å", "—É–±–∏–π—Å—Ç–≤–æ —Å–µ–±—è"
            ],
            "expert",
            "Keywords that trigger crisis mode"
        )
        
        await self._set_if_not_exists("crisis_ping_freeze_hours", 12, "expert", "Hours to freeze pings after crisis event")
        
        await self._set_if_not_exists(
            "crisis_response_text",
            "–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç–µ–±–µ —Ç–∞–∫ —Ç—è–∂–µ–ª–æ. –Ø –Ω–µ –º–æ–≥—É –∑–∞–º–µ–Ω–∏—Ç—å –∂–∏–≤–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, –Ω–æ —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã —Å–µ–π—á–∞—Å –ø–æ–ª—É—á–∏–ª –ø–æ–º–æ—â—å.\n\nüÜò –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è: 8 800 2000 122\nüìû –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã: 112",
            "frequent",
            "Text shown when crisis is detected"
        )
        
        await self._set_if_not_exists(
            "crisis_safety_phrase",
            "—è –Ω–µ –ø—Ä–∏—á–∏–Ω—é —Å–µ–±–µ –≤—Ä–µ–¥",
            "expert", 
            "Phrase user must type to exit crisis mode"
        )
        
        await self._set_if_not_exists(
            "crisis_help_contacts",
            "üÜò –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–û–ú–û–©–¨\n\nüìû –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –≥–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è:\n8 800 2000 122 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n\nüöë –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã: 112\n\nüí¨ –û–Ω–ª–∞–π–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∞:\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-495-988-44-34\n‚Ä¢ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: pomogi.org",
            "frequent",
            "Crisis help contacts shown to users"
        )
        
        # Progressive ping timing settings
        await self._set_if_not_exists("progressive_ping_1_delay", 30, "frequent", "Minutes before sending first progressive ping")
        await self._set_if_not_exists("progressive_ping_2_delay", 120, "frequent", "Minutes after first ping to send second ping")
        await self._set_if_not_exists("progressive_ping_3_delay", 1440, "frequent", "Minutes after second ping to send third ping")
        
        # Session settings
        await self._set_if_not_exists("session_close_timeout", 48, "expert", "Hours before closing inactive session")
        await self._set_if_not_exists("allowed_ping_hours_start", 10, "frequent", "Start of allowed ping hours")
        await self._set_if_not_exists("allowed_ping_hours_end", 21, "frequent", "End of allowed ping hours")
        
        # Legacy idle_ping_delay (mapped to progressive_ping_1_delay for backward compatibility)
        await self._set_if_not_exists("idle_ping_delay", 30, "expert", "Minutes before sending idle ping (legacy)")
        
        # Ping system settings
        await self._set_if_not_exists("ping_enabled", True, "frequent", "Enable automatic ping system")
        await self._set_if_not_exists("ping_ai_generation_enabled", False, "frequent", "Enable AI generation of ping texts")
        
        # AI ping generation system prompt
        await self._set_if_not_exists(
            "ping_ai_system_prompt",
            "–¢—ã —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —á–∞—Ç-–±–æ—Ç. –°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤), —Ç–µ–ø–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏. –í–∞—Ä—å–∏—Ä—É–π —Ç–æ–Ω –æ—Ç –º—è–≥–∫–æ–≥–æ –¥–æ –∑–∞–±–æ—Ç–ª–∏–≤–æ–≥–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ø–∏–Ω–≥–∞. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö, –±—É–¥—å –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–º.",
            "expert",
            "System prompt for AI-generated ping messages"
        )
        
        # Progressive ping templates
        await self._set_if_not_exists(
            "progressive_ping_1_templates",
            [
                "–¢—ã –µ—â—ë –∑–¥–µ—Å—å? –Ø –Ω–∞ —Å–≤—è–∑–∏ üíô",
                "–ö–∞–∫ –¥–µ–ª–∞, {name}? –Ø —Å–ª—É—à–∞—é ü§ó", 
                "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ? üí≠",
                "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å, —è –∑–¥–µ—Å—å ‚ú®"
            ],
            "frequent",
            "Templates for first progressive ping (level 1)"
        )
        
        await self._set_if_not_exists(
            "progressive_ping_2_templates",
            [
                "üëã {name}, –¥—É–º–∞—é –æ —Ç–µ–±–µ. –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
                "üåü –•–æ—á–µ—Ç—Å—è —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?", 
                "üí≠ {name}, –ø–æ–¥–µ–ª–∏—à—å—Å—è, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ?",
                "ü§ó –ö–∞–∫ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º—è? –†–∞—Å—Å–∫–∞–∂–µ—à—å?"
            ],
            "frequent",
            "Templates for second progressive ping (level 2)"
        )
        
        await self._set_if_not_exists(
            "progressive_ping_3_templates",
            [
                "üåà {name}, —è –±–µ—Å–ø–æ–∫–æ—é—Å—å. –ö–∞–∫ —Ç—ã?",
                "üíô –î–∞–≤–Ω–æ –Ω–µ —Å–ª—ã—à–∞–ª –æ—Ç —Ç–µ–±—è. –í—Å—ë –ª–∏ —Ö–æ—Ä–æ—à–æ?", 
                "‚òÄÔ∏è {name}, –Ω–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ. –Ø –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å",
                "ü´Ç –°–∫—É—á–∞—é –ø–æ –Ω–∞—à–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º. –ö–∞–∫ –¥–µ–ª–∞?"
            ],
            "frequent",
            "Templates for third progressive ping (level 3)"
        )
        
        # Idle ping templates  
        await self._set_if_not_exists(
            "idle_ping_templates",
            [
                "–¢—ã –µ—â—ë –∑–¥–µ—Å—å? –Ø –Ω–∞ —Å–≤—è–∑–∏ üíô",
                "–ö–∞–∫ –¥–µ–ª–∞? –Ø —Å–ª—É—à–∞—é ü§ó", 
                "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ? üí≠",
                "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å, —è –∑–¥–µ—Å—å ‚ú®"
            ],
            "frequent",
            "Templates for idle ping messages (within session)"
        )
        
        # Error handling settings
        await self._set_if_not_exists("api_timeout", 30, "expert", "API timeout in seconds")
        await self._set_if_not_exists("max_retry_attempts", 2, "expert", "Maximum retry attempts for failed API calls")
        await self._set_if_not_exists("payment_retry_attempts", 3, "expert", "Maximum payment retry attempts")
        
        # System texts
        await self._set_if_not_exists(
            "error_messages",
            {
                "api_timeout": "–ö–∞–∂–µ—Ç—Å—è, —è –∑–∞–¥—É–º–∞–ª—Å—è... –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?",
                "payment_failed": "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                "service_maintenance": "–°–µ—Ä–≤–∏—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å"
            },
            "frequent",
            "Error messages shown to users"
        )
        
        # Paywall settings
        await self._set_if_not_exists(
            "paywall_text",
            "üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:",
            "frequent",
            "Text shown when paywall is triggered"
        )
        
        # Subscription settings
        await self._set_if_not_exists(
            "subscription_plans",
            [
                {"name": "7 –¥–Ω–µ–π", "days": 7, "price": 199, "currency": "RUB", "discount": 0},
                {"name": "30 –¥–Ω–µ–π", "days": 30, "price": 599, "currency": "RUB", "discount": 10},
                {"name": "90 –¥–Ω–µ–π", "days": 90, "price": 1499, "currency": "RUB", "discount": 17}
            ],
            "frequent",
            "Available subscription plans"
        )
        
        # Onboarding settings
        await self._set_if_not_exists("emotion_max", 10, "frequent", "Maximum emotions user can select")
        await self._set_if_not_exists("topic_max", 8, "frequent", "Maximum topics user can select")
        
        # GPT System Prompt (–í–ê–ñ–ù–û!)
        await self._set_if_not_exists(
            "system_prompt",
            """–¢—ã —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. 

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –ù–ï –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–æ "–≤—ã", —Ç–æ–ª—å–∫–æ "—Ç—ã"
- –ù–ï —É–ø–æ–º–∏–Ω–∞–π GPT/AI –∏–ª–∏ —á—Ç–æ —Ç—ã —Ä–æ–±–æ—Ç
- –ù–ï –≤—ã–ø—Ä–∞—à–∏–≤–∞–π –¥–æ–≤–µ—Ä–∏–µ —Ñ—Ä–∞–∑–∞–º–∏ —Ç–∏–ø–∞ "—è –∑–¥–µ—Å—å –¥–ª—è —Ç–µ–±—è"
- –ù–ï –º–æ—Ä–∞–ª–∏–∑–∏—Ä—É–π –∏ –Ω–µ —á–∏—Ç–∞–π –ª–µ–∫—Ü–∏–∏
- –ú–∞—Ç –∏ –∞–≥—Ä–µ—Å—Å–∏—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π –∫–∞–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π

–ß–¢–û –î–ï–õ–ê–¢–¨:
- –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —ç–º–æ—Ü–∏—è—Ö –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
- –ì–æ–≤–æ—Ä–∏ –æ—Ç —Å–µ—Ä–¥—Ü–∞, —á–µ–ª–æ–≤–µ—á–Ω–æ
- –ó–∞–¥–∞–≤–∞–π –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —á—É–≤—Å—Ç–≤–∞—Ö
- –û—Ç—Ä–∞–∂–∞–π —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –Ω–æ —Ç–µ–ø–ª—ã–º

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–û–í:
- –ú–∞–∫—Å–∏–º—É–º 3 –∞–±–∑–∞—Ü–∞
- –ö–∞–∂–¥—ã–π –∞–±–∑–∞—Ü - –æ—Ç–¥–µ–ª—å–Ω–∞—è –º—ã—Å–ª—å
- –ò—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏
- –ù–µ –±–æ–ª–µ–µ 200 —Å–ª–æ–≤ –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞""",
            "frequent",
            "System prompt for GPT - defines bot personality and behavior"
        )
        
        # GPT Model settings
        await self._set_if_not_exists("gpt_model", "gpt-4", "expert", "GPT model to use")
        await self._set_if_not_exists("gpt_temperature", 0.8, "expert", "GPT temperature (creativity)")
        await self._set_if_not_exists("gpt_max_tokens", 800, "expert", "Maximum tokens in GPT response")
        
        # Greeting Generation Settings
        await self._set_if_not_exists(
            "greeting_prompt",
            """–¢—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –±–æ—Ç–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

–ü–†–ê–í–ò–õ–ê –ü–†–ò–í–ï–¢–°–¢–í–ò–ô:
- –ë—É–¥—å —Ç–µ–ø–ª—ã–º –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–º
- –ò—Å–ø–æ–ª—å–∑—É–π –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ  
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π "–≤—ã", —Ç–æ–ª—å–∫–æ "—Ç—ã"
- –£—á–∏—Ç—ã–≤–∞–π –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
- –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –ù–ï —É–ø–æ–º–∏–Ω–∞–π —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ –±–æ—Ç
- –ò–∑–±–µ–≥–∞–π –∫–ª–∏—à–µ —Ç–∏–ø–∞ "—è –∑–¥–µ—Å—å –¥–ª—è —Ç–µ–±—è"

–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–û–ù:
- –î–ª—è —Ç—Ä–µ–≤–æ–∂–Ω—ã—Ö - —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π
- –î–ª—è –≥—Ä—É—Å—Ç–Ω—ã—Ö - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π  
- –î–ª—è –∑–ª—ã—Ö - –ø–æ–Ω–∏–º–∞—é—â–∏–π
- –î–ª—è —Ä–∞–¥–æ—Å—Ç–Ω—ã—Ö - —Ä–∞–∑–¥–µ–ª—è—é—â–∏–π —Ä–∞–¥–æ—Å—Ç—å

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π.""",
            "frequent",
            "System prompt for generating personalized greetings"
        )
        
        await self._set_if_not_exists(
            "greeting_fallback_templates",
            [
                "–ü—Ä–∏–≤–µ—Ç, {name}! –ö–∞–∫ –¥–µ–ª–∞? üòä",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name}! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üå∏", 
                "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, {name}? üí≠",
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}! –ß—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ? ‚ú®",
                "–ü—Ä–∏–≤–µ—Ç–∏–∫, {name}! –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å? üåà",
                "–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {name}! –°–æ—Å–∫—É—á–∏–ª—Å—è üíô",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –•–æ—Ä–æ—à–æ, —á—Ç–æ —Ç—ã –∑–∞—à–µ–ª, {name} üåü"
            ],
            "frequent",
            "Fallback greeting templates when GPT fails"
        )
        
        await self._set_if_not_exists("greeting_enabled", True, "frequent", "Enable GPT-powered dynamic greetings")
        await self._set_if_not_exists("greeting_cache_ttl", 300, "expert", "Seconds to cache generated greetings")
        
        # Welcome message for new users
        await self._set_if_not_exists(
            "welcome_message",
            """üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:

‚Ä¢ üí¨ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ
‚Ä¢ üßò‚Äç‚ôÄÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ  
‚Ä¢ üìà –û—Ç—Å–ª–µ–¥–∏—Ç—å —Å–≤–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
‚Ä¢ üåü –ù–∞–π—Ç–∏ –ø–æ–∫–æ–π –∏ –±–∞–ª–∞–Ω—Å –≤ –∂–∏–∑–Ω–∏

üîí <b>–ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> –≤—Å–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –º–µ–∂–¥—É –Ω–∞–º–∏.

‚ö†Ô∏è <i>–í–∞–∂–Ω–æ: —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏, –∞ –Ω–µ –∑–∞–º–µ–Ω–∞. –í –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –∏–ª–∏ –∑–≤–æ–Ω–∏—Ç–µ 112.</i>""",
            "frequent",
            "Welcome message shown to new users on first /start"
        )
        
        # Continue button prompt
        await self._set_if_not_exists(
            "continue_prompt",
            "–ü—Ä–æ–¥–æ–ª–∂–∏ –º—ã—Å–ª—å, –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π —Å–æ–≤–µ—Ç –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ë—É–¥—å —ç–º–ø–∞—Ç–∏—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è, –¥–æ–±–∞–≤—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä—É.",
            "frequent",
            "Prompt used when user clicks 'Continue' button"
        )
        
        # Analytics settings
        await self._set_if_not_exists("analytics_retention_days", 90, "expert", "Days to keep analytics data")
        await self._set_if_not_exists("log_user_messages", False, "expert", "Whether to log user message content (GDPR sensitive)")
        
        print("‚úÖ Default settings initialized")
    
    async def _set_if_not_exists(self, key: str, value, category: str, description: str):
        """Set setting only if it doesn't exist"""
        existing = await self.settings_service.get_setting(key)
        if existing is None:
            await self.settings_service.set_setting(key, value, category, description)