"""
AI-—Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤ –ø–∏–Ω–≥–æ–≤
"""
import asyncio
from openai import AsyncOpenAI
from typing import Dict, Optional
import sys
sys.path.append('../../../')

from shared.config.settings import settings
from shared.models.user import User
import logging

logger = logging.getLogger(__name__)


class PingAIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤ –ø–∏–Ω–≥–æ–≤"""
    
    def __init__(self):
        self.client = AsyncOpenAI(api_key=settings.openai_api_key)
    
    async def generate_ping_text(
        self, 
        user: User, 
        ping_level: int, 
        system_prompt: str,
        user_context: Optional[Dict] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–∏–Ω–≥–∞ —Å –ø–æ–º–æ—â—å—é AI
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–∏–Ω–≥
            ping_level: –£—Ä–æ–≤–µ–Ω—å –ø–∏–Ω–≥–∞ (1, 2, 3)
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            user_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–∏–Ω–≥–∞
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            level_instructions = self._get_level_instructions(ping_level)
            user_info = self._format_user_info(user, user_context)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT
            messages = [
                {
                    "role": "system", 
                    "content": f"{system_prompt}\n\n{level_instructions}"
                },
                {
                    "role": "user",
                    "content": f"–°–æ–∑–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–∏–Ω–≥–∞ {ping_level} —É—Ä–æ–≤–Ω—è.\n\n{user_info}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤), —Ç–µ–ø–ª—ã–º –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–∞."
                }
            ]
            
            # –í—ã–∑—ã–≤–∞–µ–º OpenAI API
            response = await self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=messages,
                max_tokens=50,
                temperature=0.8,
                timeout=10.0
            )
            
            generated_text = response.choices[0].message.content.strip()
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            generated_text = self._substitute_user_variables(generated_text, user)
            
            logger.info(f"Generated ping level {ping_level} for user {user.id}: {generated_text}")
            
            return generated_text
            
        except Exception as e:
            logger.error(f"Failed to generate AI ping for user {user.id}, level {ping_level}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
            return self._get_fallback_ping(ping_level, user)
    
    def _get_level_instructions(self, ping_level: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–∏–Ω–≥–∞"""
        instructions = {
            1: "–£—Ä–æ–≤–µ–Ω—å 1 - –ú—è–≥–∫–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: –°–æ–∑–¥–∞–π –æ—á–µ–Ω—å –¥–µ–ª–∏–∫–∞—Ç–Ω–æ–µ, –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –¢–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –Ω–æ –Ω–µ –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–º.",
            2: "–£—Ä–æ–≤–µ–Ω—å 2 - –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: –ü–æ–∫–∞–∂–∏ –±–æ–ª—å—à–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –∑–∞–±–æ—Ç—ã. –ú–æ–∂–Ω–æ –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª–µ–µ –ø—Ä—è–º—ã–º –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å.",
            3: "–£—Ä–æ–≤–µ–Ω—å 3 - –ó–∞–±–æ—Ç–∞ –∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ: –í—ã—Ä–∞–∂–∞–π –∏—Å–∫—Ä–µ–Ω–Ω—é—é –∑–∞–±–æ—Ç—É –∏ –ª–µ–≥–∫–æ–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ. –ü–æ–∫–∞–∂–∏, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∞–∂–µ–Ω –∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–º–µ—á–µ–Ω–æ."
        }
        return instructions.get(ping_level, instructions[1])
    
    def _format_user_info(self, user: User, context: Optional[Dict] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        info_parts = []
        
        if user.name:
            info_parts.append(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.name}")
        
        if user.age:
            info_parts.append(f"–í–æ–∑—Ä–∞—Å—Ç: {user.age}")
        
        if user.gender:
            gender_map = {"male": "–º—É–∂—Å–∫–æ–π", "female": "–∂–µ–Ω—Å–∫–∏–π", "not_applicable": "–Ω–µ —É–∫–∞–∑–∞–Ω"}
            info_parts.append(f"–ü–æ–ª: {gender_map.get(user.gender, user.gender)}")
        
        if user.emotion_tags:
            emotions = ", ".join(user.emotion_tags[:3])  # –ü–µ—Ä–≤—ã–µ 3 —ç–º–æ—Ü–∏–∏
            info_parts.append(f"–û—Å–Ω–æ–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏: {emotions}")
        
        if context:
            if context.get('last_activity_hours'):
                info_parts.append(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {context['last_activity_hours']} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥")
        
        return "\n".join(info_parts) if info_parts else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞"
    
    def _substitute_user_variables(self, text: str, user: User) -> str:
        """–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        import pytz
        from datetime import datetime
        
        # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏
        if '{name}' in text:
            name = user.name if user.name else "–¥—Ä—É–≥ –º–æ–π"
            text = text.replace('{name}', name)
        
        # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        if '{day_part}' in text:
            try:
                if user.timezone:
                    tz = pytz.timezone(user.timezone)
                    current_hour = datetime.now(tz).hour
                else:
                    current_hour = datetime.utcnow().hour
                    
                if 5 <= current_hour < 12:
                    day_part = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
                elif 12 <= current_hour < 17:
                    day_part = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å" 
                elif 17 <= current_hour < 22:
                    day_part = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
                else:
                    day_part = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
                    
                text = text.replace('{day_part}', day_part)
            except Exception:
                text = text.replace('{day_part}', "–ü—Ä–∏–≤–µ—Ç")
        
        return text
    
    def _get_fallback_ping(self, ping_level: int, user: User) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        fallback_messages = {
            1: [
                "–¢—ã –µ—â—ë –∑–¥–µ—Å—å? –Ø –Ω–∞ —Å–≤—è–∑–∏ üíô",
                "–ö–∞–∫ –¥–µ–ª–∞? –Ø —Å–ª—É—à–∞—é ü§ó", 
                "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ? üí≠"
            ],
            2: [
                "üëã –î—É–º–∞—é –æ —Ç–µ–±–µ. –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
                "üåü –•–æ—á–µ—Ç—Å—è —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?", 
                "üí≠ –ü–æ–¥–µ–ª–∏—à—å—Å—è, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ?"
            ],
            3: [
                "üåà –Ø –±–µ—Å–ø–æ–∫–æ—é—Å—å. –ö–∞–∫ —Ç—ã?",
                "üíô –î–∞–≤–Ω–æ –Ω–µ —Å–ª—ã—à–∞–ª –æ—Ç —Ç–µ–±—è. –í—Å—ë –ª–∏ —Ö–æ—Ä–æ—à–æ?", 
                "‚òÄÔ∏è –ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ. –Ø –∑–¥–µ—Å—å ü§ó"
            ]
        }
        
        import random
        messages = fallback_messages.get(ping_level, fallback_messages[1])
        template = random.choice(messages)
        
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å placeholder
        if '{name}' in template and user.name:
            template = template.replace('{name}', user.name)
        elif '{name}' in template:
            template = template.replace('{name}', "–¥—Ä—É–≥ –º–æ–π")
            
        return template
    
    async def test_generation(self, system_prompt: str, test_level: int = 1) -> str:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –∞–¥–º–∏–Ω–∫–µ
        
        Args:
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_level: –£—Ä–æ–≤–µ–Ω—å –ø–∏–Ω–≥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∏–Ω–≥
        """
        try:
            level_instructions = self._get_level_instructions(test_level)
            
            messages = [
                {
                    "role": "system", 
                    "content": f"{system_prompt}\n\n{level_instructions}"
                },
                {
                    "role": "user",
                    "content": f"–°–æ–∑–¥–∞–π —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–∏–Ω–≥–∞ {test_level} —É—Ä–æ–≤–Ω—è. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ê–Ω–Ω–∞, –≤–æ–∑—Ä–∞—Å—Ç: 25, –ø–æ–ª: –∂–µ–Ω—Å–∫–∏–π. –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤), —Ç–µ–ø–ª—ã–º –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è."
                }
            ]
            
            response = await self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=messages,
                max_tokens=50,
                temperature=0.8,
                timeout=10.0
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"Failed to generate test ping: {e}")
            return f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"