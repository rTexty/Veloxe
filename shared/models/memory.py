from sqlalchemy import Column, String, Integer, DateTime, Boolean, ForeignKey, Text, JSON
from sqlalchemy.orm import relationship
from .base import BaseModel


class MemoryAnchor(BaseModel):
    """Long-term memory anchors - important insights from past sessions"""
    __tablename__ = "memory_anchors"
    
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    
    # Anchor identification
    anchor_id = Column(String, nullable=False, index=True)  # Unique ID for this anchor
    topic = Column(String, nullable=False)  # Topic/category (work, relationships, etc.)
    
    # Content
    insight = Column(Text, nullable=False)  # The key insight/agreement
    context = Column(Text, nullable=True)  # Original context that led to this insight
    
    # Metadata
    strength = Column(Integer, default=1)  # How often this has been referenced
    last_referenced = Column(DateTime, nullable=True)
    
    # Status
    is_active = Column(Boolean, default=True)
    auto_generated = Column(Boolean, default=True)  # Generated by GPT vs manually added
    
    # Source
    source_session_id = Column(String, nullable=True)  # Original session where this was created
    
    # Relationships
    user = relationship("User", back_populates="memory_anchors")


class ConversationSummary(BaseModel):
    """Summaries of past conversations for efficient context loading"""
    __tablename__ = "conversation_summaries"
    
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    conversation_id = Column(Integer, ForeignKey("conversations.id"), nullable=False)
    
    # Summary content
    summary = Column(Text, nullable=False)  # Key points from the conversation
    main_topics = Column(JSON, nullable=True)  # List of main topics discussed
    emotional_state = Column(String, nullable=True)  # User's emotional state
    key_outcomes = Column(JSON, nullable=True)  # Important decisions/realizations
    
    # Metadata
    message_count = Column(Integer, default=0)
    duration_minutes = Column(Integer, nullable=True)
    
    # Relationships
    user = relationship("User")
    conversation = relationship("Conversation")