#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# Usage: ./scripts/check-env.sh

set -e

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Veloxe"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
if [ ! -f .env ]; then
    error "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    echo
    info "üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª:"
    echo "   cp .env.production .env"
    echo "   nano .env"
    exit 1
fi

log "‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
log "üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
if [ -f .env ]; then
    set -a  # automatically export all variables
    if source .env 2>/dev/null; then
        log "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
    else
        warn "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π .env —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å."
    fi
    set +a  # disable automatic export
fi

echo
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:"

# –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
declare -A required_vars=(
    ["BOT_TOKEN"]="–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞"
    ["OPENAI_API_KEY"]="API –∫–ª—é—á OpenAI"
    ["ADMIN_SECRET"]="–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"
    ["POSTGRES_PASSWORD"]="–ü–∞—Ä–æ–ª—å PostgreSQL"
)

# –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
declare -A optional_vars=(
    ["POSTGRES_USER"]="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å PostgreSQL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: veloxe)"
    ["POSTGRES_DB"]="–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: veloxe)"
    ["REDIS_URL"]="URL Redis —Å–µ—Ä–≤–µ—Ä–∞"
    ["DATABASE_URL"]="URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    ["SENTRY_DSN"]="URL –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫ Sentry"
    ["LOG_LEVEL"]="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: info)"
)

issues_found=0

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
for var in "${!required_vars[@]}"; do
    if [ -n "${!var}" ]; then
        # –ú–∞—Å–∫–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if [[ "$var" == *"TOKEN"* ]] || [[ "$var" == *"KEY"* ]] || [[ "$var" == *"SECRET"* ]] || [[ "$var" == *"PASSWORD"* ]]; then
            masked_value="${!var:0:8}***"
            log "  ‚úÖ $var = $masked_value (${required_vars[$var]})"
        else
            log "  ‚úÖ $var = ${!var} (${required_vars[$var]})"
        fi
    else
        error "  ‚ùå $var –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (${required_vars[$var]})"
        issues_found=$((issues_found + 1))
    fi
done

echo
log "üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
for var in "${!optional_vars[@]}"; do
    if [ -n "${!var}" ]; then
        log "  ‚úÖ $var = ${!var} (${optional_vars[$var]})"
    else
        warn "  ‚ö†Ô∏è $var –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (${optional_vars[$var]})"
    fi
done

echo
log "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã ADMIN_SECRET
if [ -n "$ADMIN_SECRET" ]; then
    secret_length=${#ADMIN_SECRET}
    if [ $secret_length -lt 32 ]; then
        warn "  ‚ö†Ô∏è ADMIN_SECRET —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ($secret_length —Å–∏–º–≤–æ–ª–æ–≤). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞."
        issues_found=$((issues_found + 1))
    elif [ $secret_length -lt 64 ]; then
        warn "  ‚ö†Ô∏è ADMIN_SECRET –∫–æ—Ä–æ—Ç–∫–æ–≤–∞—Ç ($secret_length —Å–∏–º–≤–æ–ª–æ–≤). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 64+ —Å–∏–º–≤–æ–ª–æ–≤."
    else
        log "  ‚úÖ ADMIN_SECRET –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π ($secret_length —Å–∏–º–≤–æ–ª–æ–≤)"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ BOT_TOKEN —Ñ–æ—Ä–º–∞—Ç–∞
if [ -n "$BOT_TOKEN" ]; then
    if [[ $BOT_TOKEN =~ ^[0-9]+:[A-Za-z0-9_-]{35}$ ]]; then
        log "  ‚úÖ BOT_TOKEN –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
    else
        warn "  ‚ö†Ô∏è BOT_TOKEN –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ OPENAI_API_KEY —Ñ–æ—Ä–º–∞—Ç–∞
if [ -n "$OPENAI_API_KEY" ]; then
    if [[ $OPENAI_API_KEY =~ ^sk-[A-Za-z0-9]{20}T3BlbkFJ[A-Za-z0-9]{20}$ ]] || [[ $OPENAI_API_KEY =~ ^sk-[A-Za-z0-9_-]{43,}$ ]]; then
        log "  ‚úÖ OPENAI_API_KEY –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
    else
        warn "  ‚ö†Ô∏è OPENAI_API_KEY –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
    fi
fi

echo
if [ $issues_found -eq 0 ]; then
    log "üéâ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ì–æ—Ç–æ–≤–æ –∫ –¥–µ–ø–ª–æ—é."
    echo
    info "üí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "   ./scripts/deploy.sh        # –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω"
    echo "   ./scripts/manage.sh start  # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
    exit 0
else
    error "üö® –ù–∞–π–¥–µ–Ω–æ $issues_found –ø—Ä–æ–±–ª–µ–º. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º."
    echo
    info "üí° –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    echo "   nano .env  # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª"
    echo "   ./scripts/check-env.sh  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
    exit 1
fi