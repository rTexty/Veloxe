#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ
# Usage: ./scripts/setup-external-access.sh <server-ip-or-domain>

set -e

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

SERVER_ADDRESS="$1"

if [ -z "$SERVER_ADDRESS" ]; then
    error "‚ùå –£–∫–∞–∂–∏—Ç–µ IP –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞"
fi

log "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ Veloxe"
log "üñ•Ô∏è –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: $SERVER_ADDRESS"

# –û–±–Ω–æ–≤–ª—è–µ–º docker-compose –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
log "üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ docker-compose.prod.yml –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞..."

# –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π compose —Ñ–∞–π–ª –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
cat > docker-compose.external.yml << EOF
version: '3.8'

services:
  # PostgreSQL Database with persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: veloxe_postgres
    environment:
      POSTGRES_DB: \${POSTGRES_DB:-veloxe}
      POSTGRES_USER: \${POSTGRES_USER:-veloxe}
      POSTGRES_PASSWORD: \${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "127.0.0.1:5432:5432"  # –ë–î —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \${POSTGRES_USER:-veloxe} -d \${POSTGRES_DB:-veloxe}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache with persistent storage
  redis:
    image: redis:7-alpine
    container_name: veloxe_redis
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"  # Redis —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Telegram Bot
  bot:
    build:
      context: .
      dockerfile: apps/bot/Dockerfile
    container_name: veloxe_bot
    environment:
      - BOT_TOKEN=\${BOT_TOKEN}
      - OPENAI_API_KEY=\${OPENAI_API_KEY}
      - DATABASE_URL=postgresql+asyncpg://\${POSTGRES_USER:-veloxe}:\${POSTGRES_PASSWORD}@postgres:5432/\${POSTGRES_DB:-veloxe}
      - REDIS_URL=redis://redis:6379/0
      - ADMIN_SECRET=\${ADMIN_SECRET}
      - ENVIRONMENT=production
      - SENTRY_DSN=\${SENTRY_DSN}
      - LOG_LEVEL=\${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # Admin API (FastAPI) - –û–¢–ö–†–´–¢ –ù–ê–†–£–ñ–£
  admin-api:
    build:
      context: .
      dockerfile: apps/admin/backend/Dockerfile
    container_name: veloxe_admin_api
    environment:
      - DATABASE_URL=postgresql+asyncpg://\${POSTGRES_USER:-veloxe}:\${POSTGRES_PASSWORD}@postgres:5432/\${POSTGRES_DB:-veloxe}
      - REDIS_URL=redis://redis:6379/0
      - ADMIN_SECRET=\${ADMIN_SECRET}
      - ENVIRONMENT=production
      - SENTRY_DSN=\${SENTRY_DSN}
      - WORKERS=\${WORKERS:-4}
      - LOG_LEVEL=\${LOG_LEVEL:-info}
    ports:
      - "8000:8000"  # API –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # Admin Frontend (React) - –û–¢–ö–†–´–¢ –ù–ê–†–£–ñ–£
  admin-frontend:
    build:
      context: .
      dockerfile: apps/admin/frontend/Dockerfile.prod
      args:
        - REACT_APP_API_URL=http://$SERVER_ADDRESS:8000/api
    container_name: veloxe_admin_frontend
    ports:
      - "3000:80"  # –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ
    depends_on:
      - admin-api
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    driver: bridge
EOF

log "‚úÖ –°–æ–∑–¥–∞–Ω docker-compose.external.yml"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall –ø—Ä–∞–≤–∏–ª
log "üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall –ø—Ä–∞–≤–∏–ª..."

info "–î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ firewall —Å–µ—Ä–≤–µ—Ä–∞:"
echo "  sudo ufw allow 3000/tcp comment 'Veloxe Admin Frontend'"
echo "  sudo ufw allow 8000/tcp comment 'Veloxe Admin API'"
echo "  sudo ufw reload"

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å –≤–Ω–µ—à–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º
cat > scripts/start-external.sh << 'EOF'
#!/bin/bash

# –ó–∞–ø—É—Å–∫ Veloxe —Å –≤–Ω–µ—à–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º

set -e

GREEN='\033[0;32m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

log "üåê –ó–∞–ø—É—Å–∫ Veloxe —Å –≤–Ω–µ—à–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
if [ ! -f .env ]; then
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.external –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ."
    exit 1
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
log "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f docker-compose.external.yml down 2>/dev/null || true

# –ó–∞–ø—É—Å–∫ —Å –≤–Ω–µ—à–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º
log "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –≤–Ω–µ—à–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º..."
docker-compose -f docker-compose.external.yml up -d

log "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!"
log "üåê –ê–¥–º–∏–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://YOUR_SERVER_IP:3000"
log "üîó API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://YOUR_SERVER_IP:8000"
EOF

chmod +x scripts/start-external.sh

log "‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç scripts/start-external.sh"

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
echo
info "üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò –ù–ê –°–ï–†–í–ï–†–ï:"
echo
echo "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ firewall:"
echo "   sudo ufw allow 3000/tcp comment 'Veloxe Admin Frontend'"
echo "   sudo ufw allow 8000/tcp comment 'Veloxe Admin API'"
echo "   sudo ufw reload"
echo
echo "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:"
echo "   cp .env.external .env"
echo "   nano .env  # –∑–∞–º–µ–Ω–∏—Ç–µ YOUR_SERVER_IP_HERE –Ω–∞ $SERVER_ADDRESS"
echo
echo "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å –≤–Ω–µ—à–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º:"
echo "   ./scripts/start-external.sh"
echo
echo "4. –ê–¥–º–∏–Ω–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É:"
echo "   http://$SERVER_ADDRESS:3000"
echo
warn "‚ö†Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:"
echo "   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–ª—å–Ω—ã–π ADMIN_SECRET (64 —Å–∏–º–≤–æ–ª–∞)"
echo "   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É HTTPS —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏"
echo "   - –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –¥–æ—Å—Ç—É–ø –ø–æ IP –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ"

log "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"